return_state class::on_event(STATE_A s_a, EVENT_D& e_a) {

   if(oneliner)
      return STATE_ONE_LINER{};

   return SOMETHING_TRENARY
                           ? STATE_A{}
                           : STATE_B{};
}

return_state class::on_event(STATE_B& s_a, EVENT_A& e_a)
{
   if (some_condition) {
      return STATE_A{};
   }

   if (masheu) {
      return STATE_A{};
   } else if (some_other_condition_number) {
      return STATE_B{};
   } else {
      return STATE_C{};
   }
}


return_state class::on_event(STATE_A s_a, EVENT_A& e_a) {

   return STATE_B{};
}


return_state class::on_event(STATE_A& s_a, EVENT_B& e_a)
{
   return something > 0 ? std::nullopt : STATE_B{};
}


return_state class::on_event(STATE_B& s_a, EVENT_C& e_a)
{

   if (some_irrelevant) {
      ......
      .....
   }

   if (some_some) {
      if (some_inside)
      {
         return STATE_A{};
      }

      return STATE_B{};
   }

   return std::nullopt;
}

some SOME::on_event(STATE_A &, const EVENT_CASE &state) {

    switch (something) {
    case big:
        return STATE_C{};
    case medium:
        [[fallthrough]]
    case small:
        return STATE_D{};

    default:
      return STATE_G{};
    }

}




